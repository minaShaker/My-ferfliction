What happens when you initialize a repository? Why do you need to do it?

    when run the code git init 
        a new file called .git was created
        the normal file i created has terned into a repository
        a word master has been added into the end of the name of the directory 
    i need to make repository
        to create a way to control versions of my projects 
        to make it easir to track my files

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    working directory
        it's the place in which the files are being modified and changed
    staging area
        collecting the files to be commited
    repository
        the place where we keep the commits (diffrent versions of the file(s) that we are tracking)
        
How can you use the staging area to make sure you have one commit per logical
change?

    as we can use diff --stage to know what changes we made in the file
    so we can see exactlee what changes we made and we are abut to commit
    so we can understand what are we commiting here in the file 
    and we can call the commit by it's logical changes

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    make two versions not wellingly to merge them
        like translate the project
        put new algorithm in which the prigram work
        diffrent styles
        easy to switch from a version and the other
        easy to compare diffrent ideas with one and another
        replace the orginal idea with a new one
    make a new branch to merge it with the program in the end 
        new feature
        fix a bug
        saving the edit of my college to a branch 

How do the diagrams help you visualize the branch structure?

    git log --graph espisially with --oneline
        helps understand where the branch is made 
        the parent of each commit
        put the commits in order
        track a bug down

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    what new in branch 1 and 2 will be add to a new commit
    the common between branch 1 and 2 will be add also
    the stuff which is present in the common parent file and not present in neither of the two branches won't be included
    this new commit will be add to the tip of the current checked out branch
    after that we should delete the branch name by git branch -d [branch name]
    the graph help s visualiza the branches we have 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
